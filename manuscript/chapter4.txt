# Dealing with Numbers

## Integer vs. Double
The two most common numeric classes used in R are integer and double (for double precision floating point numbers). R automatically converts between these two classes when needed for mathematical purposes. As a result, it's feasible to use R and perform analyses for years without specifying these differences.

### Creating Integer and Double Vectors

{linenos=off}
```r
# create a string of double-precision values
dbl_var <- c(1, 2.5, 4.5)  
dbl_var
## [1] 1.0 2.5 4.5

# placing an L after the values creates a string of integers
int_var <- c(1L, 6L, 10L)
int_var
## [1]  1  6 10
```

### Converting Between Integer and Double Values
By default, if you read in data that has no decimal points or you [create numeric values](generating_sequence_numbers) using the `x <- 1:10` method the numeric values will be coded as integer.  If you want to change a double to an integer or vice versa: 

{linenos=off}
```r
# converts integers to double-precision values
as.double(int_var)     
## [1]  1  6 10

# identical to as.double()
as.numeric(int_var)    
## [1]  1  6 10

# converts doubles to integers
as.integer()           
## integer(0)
```

### Checking for Numeric Type
To check whether a vector is made up of integer or double values:


```r
# identifies the vector type (double, integer, logical, or character)
typeof(x)     
```

## Generating sequence of non-random numbers


## Generating sequence of random numbers


## Setting the seed for reproducible random numbers


## Comparing numeric values


## Rounding numbers
There are many ways of rounding to the nearest integer, up, down, or toward a specified decimal place.  Lets assume `x = 1, 1.35, 1.7, 2.05, 2.4, 2.75, 3.1, 3.45, 3.8, 4.15, 4.5, 4.85, 5.2, 5.55, 5.9`.  The following illustrates the common ways to round `x`.


{linenos=off}
```r
# Round to the nearest integer
round(x)
##  [1] 1 1 2 2 2 3 3 3 4 4 4 5 5 6 6

# Round up
ceiling(x)
##  [1] 1 2 2 3 3 3 4 4 4 5 5 5 6 6 6
 
# Round down
floor(x)
##  [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5
 
# Round to a specified decimal
round(x, digits = 1)
##  [1] 1.0 1.4 1.7 2.0 2.4 2.8 3.1 3.4 3.8 4.2 4.5 4.8 5.2 5.5 5.9
```
