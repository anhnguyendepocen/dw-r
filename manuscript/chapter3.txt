# R Basics

## Getting help
The help documentation and support in R is comprehensive and easily accessible from the command line. To leverage general help resources you can use the following:  

{line-numbers=off}
```r
# provides general help links
help.start()   

# searches the help system for documentation matching a given character string
help.search("text")    
```
Note that the `help.search("some text here")` function requires a character string enclosed in quotation marks.

### Getting Help on Packages

For more direct help on packages that are installed on your computer:

{line-numbers=off}
```r
# provides details regarding contents of a package
help(package = "packagename")      

# list vignettes available for a specific package
vignette(package = "packagename")  

# view specific vignette
vignette("vignettename")           

# view all vignettes on your computer
vignette()                         
```

Note that some packages will have multiple vignettes.  For instance `vignette(package = "grid")` will list the 13 vignettes available for the grid package.  To access one of the specific vignettes you simply use `vignette("vignettename")`. 

### Getting Help on Functions

For more direct help on functions that are installed on your computer:


```r
help(functionname)      # provides details for specific function
?functionname           # provides same information as help(functionname) 
example(functionname)   # provides examples for said function
```

Note that the `help()` and `?` function calls only work for functions within loaded packages.  If you want to see details on a function in a package that is installed on your computer but not loaded in the active R session you can use `help(functionname, package = "packagename")`.  Another alternative is to use the `::` operator as in `help(packagename::functionname)`.

### Getting Help from the Web
Typically, a problem you may be encountering is not new and others have faced, solved, and documented the same issue online.  The following resources can be used to search for online help.  Although, I typically just google the problem and find answers relatively quickly.

* `RSiteSearch("key phrase")`:  searches for the key phrase in help manuals and archived mailing lists on the [R Project website]("http://search.r-project.org/").
* [Stack Overflow](http://stackoverflow.com/): a searchable Q&A site oriented toward programming issues.  75% of my answers typically come from Stack Overflow.
* [Cross Validated](http://stats.stackexchange.com/): a searchable Q&A site oriented toward statistical analysis.
* [R-seek](http://rseek.org): a Google custom search that is focused on R-specific websites
* [R-bloggers](http://www.r-bloggers.com/): a central hub of content collected from over 500 bloggers who provide news and tutorials about R.

## Workspace
The workspace is your current R working environment and includes any user-defined objects (vectors, matrices, data frames, lists, functions).  The following code provides the basics for understanding, configuring and customizing your current R environment.

### Working Directory
The *working directory* is the default location for all file inputs and outputs.  

```r
getwd()                  # returns path for the current working directory
setwd(directory_name)    #set the working directory to directory_name
```

For example, if I call `getwd()` the file path "/Users/bradboehmke/Desktop/Personal/R Vocabulary" is returned.  If I want to set the working directory to the "Workspace" folder within the "R Vocabulary" directory I would use `setwd("Workspace")`.  Now if I call `getwd()` again it returns "/Users/bradboehmke/Desktop/Personal/R Vocabulary/Workspace".

### Environment Objects
To identify or remove the objects (i.e. vectors, data frames, user defined functions, etc.) in your current R environment:

```r
ls()                         # list all objects 
exists("object_name")        # identify if an R object with a given name is present
rm("object_name")            # remove defined object from the environment 
rm(c("object1", "object2"))  # you can remove multiple objects by using the `c()` function
rm(list = ls())              # basically removes everything working environment -- use with caution!
```



### Command History
You can view previous commands one at a time by simply pressing &#8679; or view a defined number of previous commands with:

```r
history()        # default shows 25 most recent commands
history(100)     # show 100 most recent commands
history(Inf)     # show entire saved history
```


### Saving & Loading 
You can save and load your workspaces.  Saving your workspace will save all R files and objects within your workspace to a .RData file.

```r
save.image()                                     # save all items in workspace to a .RData file
save(object1, object2, file = "myfile.RData")    # save specified objects to a .RData file
load("myfile.RData")                             # load workspace into current session
```

Note that saving the workspace without specifying the working directory will default to saving in the current directory.  You can further specify where to save the .RData by including the path: `save(object1, object2, file = "/users/name/folder/myfile.RData")`


### Workspace Options
You can view and set options for the current R session:

```r
help(options)        # learn about available options
options()            # view current option settings
options(digits=3)    # change a specific option (i.e. number of digits to print on output)
```


### Shortcuts
To access a menu displaying all the shortcuts in RStudio you can use  &#8997;&#8679;k (option + shift + k).  Within RStudio you can also access them in the Help menu &#187; Keyboard Shortcuts.


## Working with packages


## Useful packages
