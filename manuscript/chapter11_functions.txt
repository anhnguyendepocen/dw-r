# Functions

> *"To iterate is human, to recurse divine."* - L. Peter Deutsch

Provide introduction here...

In this chapter I will first provide you with the basic knowledge of how functions operate in R.  In the [first section](#creating_functions) I cover the general components of functions, scoping and evaluation rules, managing function outputs, handling invalid parameters, and saving & sourcing functions for reuse.  This will provide you the with the required knowledge to start building your own functions.  

[Section two](#loop_functions) will then cover the basic loop functions in R.  These loop functions are considered "control structures" because they allow you to control the flow of execution through various logical commands.  Common loop functions that I will cover include `if`, `else`, `for`, `while`, and `repeat`.  In addition, I cover `break` and `next` which allow you to further control flow within the aforementioned loop functions.

[Section three](#apply_family) covers a set of vectorized functions known as the apply family of functions which minimize your need to explicitly create loops.  I then provide some [additional "loop-like" functions](#other_loops) that are helpful in everyday data analysis followed by a list of [additional resources](#functions_add_resource) to learn more about functions in R.

## Creating functions {#creating_functions}

### Function Components
With the exception of [primitive functions](https://cran.r-project.org/doc/manuals/r-release/R-ints.html#g_t_002eInternal-vs-_002ePrimitive) all R functions have three parts:

- `body()`: the code inside the function
- `formals()`: the list of arguments used to call the function
- `environment()`: the mapping of the location(s) of the function's variables

For example, let's build a function that calculates the present value (PV) of a single future sum.  The equation for a single sum PV is: $PV = FV/(1+r)^n$ where FV is future value, r is the interest rate, and n is the number of periods.  In the function that follows the `body` of the function includes the equation $FV/(1+r)^n$ and then rounding the output to two decimals. The `formals` (or arguments) required for the function include `FV`, `r`, and `n`.  And the `environment` shows that function operates in the global environment.


## Loops {#loop_functions}


## Apply family {#apply_family}


## Other useful "loop-like" functions {#other_loops}


## Additional Resources {#functions_add_resource}



