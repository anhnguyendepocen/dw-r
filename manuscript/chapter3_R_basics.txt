# R Basics

> *"Programming is like kicking yourself in the face, sooner or later your nose will bleed."* - Kyle Woodbury


A computer language is described by its *syntax* and *semantics*; where syntax is about the structure or the grammar of the language and semantics the meaning behind the sentence. Jumping into a new programming language correlates to visiting a foreign country with only that 9th grade Spanish 101 class under your belt. Without 

This chapter will cover some of the basics of R to get you comfortable.  This includes understanding how to [assign and evaluation expressions](#basics_assignment), the idea of [vectorization](#basics_vectorization), how to [get help](#basics_help), managing your [workspace](#basics_workspace), and how to work with [packages](#packages).  


## Assignment & Evaluation {#basics_assignment}


## Vectorization {#basics_vectorization}

## Getting help {#basics_help}
The help documentation and support in R is comprehensive and easily accessible from the command line. To leverage general help resources you can use the following:  

{line-numbers=off}
```r
# provides general help links
help.start()   

# searches the help system for documentation matching a given character string
help.search("text")    
```
Note that the `help.search("some text here")` function requires a character string enclosed in quotation marks.

### Getting Help on Packages

For more direct help on packages that are installed on your computer:

{line-numbers=off}
```r
# provides details regarding contents of a package
help(package = "packagename")      

# list vignettes available for a specific package
vignette(package = "packagename")  

# view specific vignette
vignette("vignettename")           

# view all vignettes on your computer
vignette()                         
```

Note that some packages will have multiple vignettes.  For instance `vignette(package = "grid")` will list the 13 vignettes available for the grid package.  To access one of the specific vignettes you simply use `vignette("vignettename")`. 

### Getting Help on Functions

For more direct help on functions that are installed on your computer:

{line-numbers=off}
```r
# provides details for specific function
help(functionname)      

# provides same information as help(functionname)
?functionname           

# provides examples for said function
example(functionname)   
```

Note that the `help()` and `?` function calls only work for functions within loaded packages.  If you want to see details on a function in a package that is installed on your computer but not loaded in the active R session you can use `help(functionname, package = "packagename")`.  Another alternative is to use the `::` operator as in `help(packagename::functionname)`.

### Getting Help from the Web
Typically, a problem you may be encountering is not new and others have faced, solved, and documented the same issue online.  The following resources can be used to search for online help.  Although, I typically just google the problem and find answers relatively quickly.

* `RSiteSearch("key phrase")`:  searches for the key phrase in help manuals and archived mailing lists on the [R Project website]("http://search.r-project.org/").
* [Stack Overflow](http://stackoverflow.com/): a searchable Q&A site oriented toward programming issues.  75% of my answers typically come from Stack Overflow.
* [Cross Validated](http://stats.stackexchange.com/): a searchable Q&A site oriented toward statistical analysis.
* [R-seek](http://rseek.org): a Google custom search that is focused on R-specific websites
* [R-bloggers](http://www.r-bloggers.com/): a central hub of content collected from over 500 bloggers who provide news and tutorials about R.

{#basics_workspace}
## Workspace
The workspace is your current R working environment and includes any user-defined objects (vectors, matrices, data frames, lists, functions).  The following code provides the basics for understanding, configuring and customizing your current R environment.

### Working Directory
The *working directory* is the default location for all file inputs and outputs.  

{line-numbers=off}
```r
# returns path for the current working directory
getwd()                  

#set the working directory to directory_name
setwd(directory_name)    
```

For example, if I call `getwd()` the file path "/Users/bradboehmke/Desktop/Personal/R Vocabulary" is returned.  If I want to set the working directory to the "Workspace" folder within the "R Vocabulary" directory I would use `setwd("Workspace")`.  Now if I call `getwd()` again it returns "/Users/bradboehmke/Desktop/Personal/R Vocabulary/Workspace".

### Environment Objects
To identify or remove the objects (i.e. vectors, data frames, user defined functions, etc.) in your current R environment:

{line-numbers=off}
```r
# list all objects
ls()              

# identify if an R object with a given name is present
exists("object_name")        

# remove defined object from the environment
rm("object_name")            

# you can remove multiple objects by using the `c()` function
rm(c("object1", "object2"))  

# basically removes everything in the working environment -- use with caution!
rm(list = ls())              
```



### Command History
You can view previous commands one at a time by simply pressing &#8679; or view a defined number of previous commands with:

{line-numbers=off}
```r
# default shows 25 most recent commands
history()        

# show 100 most recent commands
history(100)     

# show entire saved history
history(Inf)     
```


### Saving & Loading 
You can save and load your workspaces.  Saving your workspace will save all R files and objects within your workspace to a .RData file.

{line-numbers=off}
```r
# save all items in workspace to a .RData file
save.image()                                  

# save specified objects to a .RData file
save(object1, object2, file = "myfile.RData")    

# load workspace into current session
load("myfile.RData")                             
```

Note that saving the workspace without specifying the working directory will default to saving in the current directory.  You can further specify where to save the .RData by including the path: `save(object1, object2, file = "/users/name/folder/myfile.RData")`


### Workspace Options
You can view and set options for the current R session:

{line-numbers=off}
```r
# learn about available options
help(options)

# view current option settings
options()            

# change a specific option (i.e. number of digits to print on output)
options(digits=3)    
```


### Shortcuts
To access a menu displaying all the shortcuts in RStudio you can use option + shift + k.  Within RStudio you can also access them in the Help menu &#187; Keyboard Shortcuts.


## Working with packages {#packages}
In R, the fundamental unit of shareable code is the package.  A package bundles together code, data, documentation, and tests and provides an easy method to share with others[^hadley_R_Packages].  As of September 2015 there were over 7000 packages available on [CRAN](https://cran.r-project.org), 1000 on [Bioconductor](https://www.bioconductor.org), and countless more available through [GitHub](https://github.com).  This huge variety of packages is one of the reasons that R is so successful: chances are that someone has already solved a problem that you're working on, and you can benefit from their work by downloading their package.

### Installing Packages
To install packages: 

{line-numbers=off}
```r
# install packages from CRAN
install.packages("packagename")   
```

As previously stated, packages are also available through Bioconductor and GitHub.  To download Bioconductor packages:

{line-numbers=off}
```r
# link to Bioconductor URL
source("http://bioconductor.org/biocLite.R")  

# install core Bioconductor packages
biocLite()                                    

# install specific Bioconductor package
biocLite("packagename")                       
```

And to download GitHub packages:

{line-numbers=off}
```r
# the devtools package provides a simply function to download GitHub packages
install.packages("devtools")                      

# install package which exists at github.com/username/packagename
devtools::install_github("username/packagename")  
```

### Loading Packages
Once the package is downloaded to your computer you can access the functions and resources provided by the package in two different ways:

{line-numbers=off}
```r
# load the package to use in the current R session
library(packagename)         

# use a particular function within a package without loading the package
packagename::functionname    
```
For instance, if you want to have full access to the tidyr package you would use `library(tidyr)`; however, if you just wanted to use the `gather()` function without loading the tidyr package you can use `tidyr::gather(function arguments)`.


### Getting Help on Packages
For help on packages that are installed on your computer:

{line-numbers=off}
```r
# provides details regarding contents of a package
help(package = "packagename")

# see all packages installed
library()                          

# see packages currently loaded
search()                           

# list vignettes available for a specific package
vignette(package = "packagename")  

# view specific vignette
vignette("vignettename")           

# view all vignettes on your computer
vignette()                         
```

Note that some packages will have multiple vignettes.  For instance `vignette(package = "grid")` will list the 13 vignettes available for the grid package.  To access one of the specific vignettes you simply use `vignette("vignettename")`.


## Useful packages
There are thousands of helpful R packages for you to use, but navigating them all can be a challenge.  To help you out, RStudio compiled a [guide](https://support.rstudio.com/hc/en-us/articles/201057987-Quick-list-of-useful-R-packages) to some of the best packages for loading, manipulating, visualizing, analyzing, and reporting data.  In addition, their list captures packages that specialize in spatial data, time series and financial data, increasing spead and performance, and developing your own R packages. 




[^hadley_R_Packages]: [Wickham, H. (2015). *R packages.* "O'Reilly Media, Inc.".](http://r-pkgs.had.co.nz/)
