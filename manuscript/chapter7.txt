# Dealing with Dates
Real world data are often associated with dates and time; however, dealing with dates accurately can appear to be a complicated task due to the variety in formats and accounting for time-zone differences and leap years.  R has a range of functions that allow you to work with dates and times.  Furthermore, packages such as [`lubridate`](https://cran.r-project.org/web/packages/lubridate/index.html) make it easier to work with dates and times.

In this chapter I will introduce you to the basics of dealing with dates.  This includes printing the [current date and time](#current_date_time) stamp, [converting strings to dates](#date_convert), [extracting and manipulating parts of dates](#date_extract), [creating date sequences](#date_seq), performing [calculations with dates](#date_calc), and dealing with [time zone and daylight savings differences(#date_time_zone).  I end with offering [additional resources](#date_addtl) to learn and deal with date and time data.


## Getting current date & time {#current_date_time}
To get current date and time information:

{linenos=off}
```r
Sys.timezone()
## [1] "America/New_York"

Sys.Date()
## [1] "2015-09-24"

Sys.time()
## [1] "2015-09-24 15:08:57 EDT"
```


If using the `lubridate` package:

{linenos=off}
```r
library(lubridate)

now()
## [1] "2015-09-24 15:08:57 EDT"
```


## Converting strings to dates {#date_convert}
When date and time data are imported into R they will often default to a character string.  This requires us to [convert strings to dates](#date_convert_strings).  We may also have multiple strings that we want to [merge to create a date variable](#date_merge_strings).  


### Convert Strings to Dates {#date_convert_strings}
To convert a string that is already in a date format (YYYY-MM-DD) into a date object use `as.Date()`:

{linenos=off}
```r
x <- c("2015-07-01", "2015-08-01", "2015-09-01")

as.Date(x)
## [1] "2015-07-01" "2015-08-01" "2015-09-01"
```

Note that the defaul date format is YYYY-MM-DD; therefore, if your string is of different format you must incorporate the `format` argument.  Note that there are multiple formats that dates can be in; for a complete list of formatting code options in R type `?strftime` in your console.

{linenos=off}
```r
y <- c("07/01/2015", "07/01/2015", "07/01/2015")

as.Date(y, format = "%m/%d/%Y")
## [1] "2015-07-01" "2015-07-01" "2015-07-01"
```


If using the `lubridate` package:

{linenos=off}
```r
library(lubridate)
ymd(x)
## [1] "2015-07-01 UTC" "2015-08-01 UTC" "2015-09-01 UTC"

mdy(y)
## [1] "2015-07-01 UTC" "2015-07-01 UTC" "2015-07-01 UTC"
```

One of the many benefits of the `lubricate` package is that it automatically recognizes the common separators used when recording dates ("-", "/", ".", and "").  As a result, you only need to focus on specifying the order of the date elements to determine the parsing function applied:


![](images/lubridate_parsing.png)


### Create Dates by Merging Data {#date_merge_strings}
Sometimes your date data are collected in separate elements.  To convert these separate data into one date object incorporate the `ISOdate()` function:

{linenos=off}
```r
yr <- c("2012", "2013", "2014", "2015")
mo <- c("1", "5", "7", "2")
day <- c("02", "22", "15", "28")

# ISOdate converts to a POSIXct object
ISOdate(year = yr, month = mo, day = day)
## [1] "2012-01-02 12:00:00 GMT" "2013-05-22 12:00:00 GMT"
## [3] "2014-07-15 12:00:00 GMT" "2015-02-28 12:00:00 GMT"

# truncate the unused time data by converting with as.Date
as.Date(ISOdate(year = yr, month = mo, day = day))
## [1] "2012-01-02" "2013-05-22" "2014-07-15" "2015-02-28"
```
Note that `ISODate()` also has arguments to accept data for hours, minutes, seconds, and time-zone if you need to merge all these separate components.


## Extract & manipulate parts of dates {#date_extract}
To extract and manipulate individual elements of a date I typically use the `lubridate` package due to its simplistic function syntax.  The functions provided by `lubridate` to perform extraction and manipulation of dates include:

![](images/lubridate_accessors.png)

To extract an individual element of the date variable you simply use the accessor function desired.  Note that the accessor variables have additional arguments that can be used to show the name of the date element in full or abbreviated form.

{linenos=off}
```r
library(lubridate)

x <- c("2015-07-01", "2015-08-01", "2015-09-01")

year(x)
## [1] 2015 2015 2015

# default is numerical value
month(x)
## [1] 7 8 9

# show abbreviated name
month(x, label = TRUE)
## [1] Jul Aug Sep
## 12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec

# show unabbreviated name
month(x, label = TRUE, abbr = FALSE)
## [1] July      August    September
## 12 Levels: January < February < March < April < May < June < ... < December


wday(x, label = TRUE, abbr = FALSE)
## [1] Wednesday Saturday  Tuesday  
## 7 Levels: Sunday < Monday < Tuesday < Wednesday < Thursday < ... < Saturday
```

To manipulate or change the values of date elements we simply use the accessor function to extract the element of choice and then use the assignment function to assign a new value.

{linenos=off}
```r
# convert to date format
x <- ymd(x)
x
## [1] "2015-07-01 UTC" "2015-08-01 UTC" "2015-09-01 UTC"

# change the days for the dates
mday(x)
## [1] 1 1 1

mday(x) <- c(3, 10, 22)
x
## [1] "2015-07-03 UTC" "2015-08-10 UTC" "2015-09-22 UTC"

# can also use 'update()' function
update(x, year = c(2013, 2014, 2015), month = 9)
## [1] "2013-09-03 UTC" "2014-09-10 UTC" "2015-09-22 UTC"

# can also add/subtract units
x + years(1) - days(c(2, 9, 21))
## [1] "2016-07-01 UTC" "2016-08-01 UTC" "2016-09-01 UTC"
```


## Creating date sequences {#date_seq}



## Calculations with dates {#date_calc}


## Dealing with time zones & daylight savings {#date_time_zone}


## Additional resources {#date_addtl}
